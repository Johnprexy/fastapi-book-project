name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image
        run: docker build -t fastapi-app .

      - name: Save Docker image as tar
        run: |
          docker save -o fastapi-app.tar fastapi-app
          chmod 644 fastapi-app.tar  # Ensure read access
          ls -lh fastapi-app.tar  # Debugging output

      - name: Ensure target directory exists and is writable
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            mkdir -p ~/deployments
            chmod 777 ~/deployments  # Ensure directory is writable
            rm -f ~/deployments/fastapi-app.tar

      - name: Copy Docker image to DigitalOcean VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          source: "fastapi-app.tar"
          target: "~/deployments"

      - name: Deploy on DigitalOcean VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            cd ~/deployments

            if [ ! -f fastapi-app.tar ]; then
              echo "❌ Error: fastapi-app.tar not found"
              exit 1
            fi

            # Stop and remove old container
            docker stop fastapi-app || true
            docker rm fastapi-app || true
            docker rmi fastapi-app || true

            # Check if port 80 is in use, kill the process if needed
            sudo lsof -i :80 | awk 'NR>1 {print $2}' | xargs sudo kill -9 || true

            # Load new image
            docker load -i fastapi-app.tar
            if [ $? -ne 0 ]; then
              echo "❌ Error: Failed to load Docker image"
              exit 1
            fi

            # Run the new container
            docker run -d --name fastapi-app -p 80:80 --restart always fastapi-app
            if [ $? -ne 0 ]; then
              echo "❌ Error: Failed to start container"
              exit 1
            fi

            # Cleanup
            rm -f fastapi-app.tar
            echo "✅ Deployment successful!"
